h2. Requirements

* "Ruby 1.8":http://www.ruby-lang.org/
* "Ruby Gems":http://www.rubygems.org/
** "ParseTree":http://github.com/seattlerb/parsetree/
** "rake":http://rake.rubyforge.org/ <sup><a href="#fn1">1</a></sup>
** "rcov":http://eigenclass.org/hiki/rcov/ <sup><a href="#fn1">1</a></sup>
** "rspec":http://www.rspec.info/ <sup><a href="#fn1">1</a></sup>
** "ruby2ruby":http://github.com/seattlerb/ruby2ruby/

fn1. are only necessary for executing the @rakefile@ which runs the unit tests and generates test and code coverage reports. Otherwise, the basic requirements are enough.

h2. File Structure

Each item in the following list represents a component of the framework. Each element contained in the table provided once per component indicates a source file containing part of its implementation. Those files are stored in the @src/@ directory (see *Git Repository* for more information).

All components, except the Libraries, have a façade file in case they consist on several files. Just importing (@require@) the façade is sufficient for accessing all the logic implemented by the component. Façades are clearly labelled in the Description column. When a façade is merely a list of imports and does not contain any real code, it is just labelled as a header.

Since the code is thoroughly unit tested, most classes have their RSpec counterpart in the @spec/@ directory. When this is the case, a cross appears on the Spec column. Some header files also have its RSpec counterpart, which may seem counterintuitive. This specs are not real tests, but helper files containing utility hooks for easing the task of testing other components which depend on the present one.

* Property

| File                    | Spec | Description                                                               |
| @property@              | X    | header                                                                    |
| @property_class@        | X    | _Property_ class definition, mainly providing a namespace facility        |
| @property_core@         | X    | _Property_ instances definition                                           |
| @property_ast@          | _    | AST for representing the relevant parts of predicates                     |
| @property_rcollector@   | X    | _ResultCollector_ stores subexpression results of instrumented predicates |
| @property_pvisitor@     | X    | _PropertyVisitor_ instruments _Properties_ and builds a simplied AST      |
| @property_covervisitor@ | X    | _CoverVisitor_ computes property coverage goals                           |
| @property_covertable@   | X    | _CoverTable_ stores property coverage information                         |
| @property_language@     | X    | DSL for defining properties                                               |
| @property_cases@        | X    | infrastructure for declaring test cases for each property                 |


* Property: property abstraction
** @property@ <sup>f,h</sup>
** @property_class@ <sup>s</sup>: _Property_ class definition (property namespace)
** @property_core@ <sup>s</sup>: _Property_ instances definition
** @property_ast@: AST for representing a simplified view of predicates
** @property_rcollector@ <sup>s</sup>: _ResultCollector_, used for storing subexpression results of instrumented predicates
** @property_pvisitor@ <sup>s</sup>: _PropertyVisitor_ instruments _Properties_ and builds a simplied AST
** @property_covervisitor@ <sup>s</sup>: _CoverVisitor_ computes property coverage goals
** @property_covertable@ <sup>s</sup>: _CoverTable_ stores property coverage information
** @property_language@ <sup>s</sup>: DSL for defining properties
** @property_cases@ <sup>s</sup>


* Contract
** @contract@ <sup>f,h</sup>
** @contract_core@ <sup>s</sup>
** @contract_language@ <sup>s</sup>


* Pipeline: pipeline abstraction, after the Pipes & Filters architectural pattern
** @pipeline@ <sup>f,s</sup>: pipeline interfaces and partial implementations
** @plist@ <sup>s</sup>: _PList_, Wrapper of _Array_, the data to flow along the pipeline
** @action@ <sup>s</sup>: utility filters for placing arbitrary code on the pipeline


* Runner
** @runner@ <sup>f,p</sup>


* Simplerunner
* @simplerunner@ <sup>f,s</sup>


* Complexrunner
* @complexrunner@ <sup>f,s</sup>


* Strategy
** @strategy@ <sup>f,p</sup>


* Human
** @cases@ <sup>s</sup>

* Random
** @random@ <sup>f,h</sup>
** @random_combinators@ <sup>s</sup>
** @random_string@ <sup>s</sup>
** @random_strategy@ <sup>s</sup>


* Exhaustive
** @exhaustive@ <sup>f,h</sup>
** @exhaustive_combinators@ <sup>s</sup>
** @exhaustive_lazy@ <sup>s</sup>
** @exhaustive_string@ <sup>s</sup>
** @exhaustive_strategy@ <sup>s</sup>


* Historic
** @historic@ <sup>f,s</sup>
** @errordatabase@ <sup>s</sup>


* UI
** @ui@ <sup>s</sup>
** @ui_protocol@


* BatchUI
** @batchui@


* TextUI
** @textui@


* Libraries

| File            | Spec | Description                                                |
| @decorator@     | X    | Decorator design pattern                                   |
| @initializer@   | X    | simplified constructors through metaprogramming, à la CLOS |
| @lineutils@     | X    | line manipulation functions to fit text into screen size   |
| @permutations@  | X    | Lisp-like macro for generating permutations                |
| @progressbar@   | X    | text-mode progress bar UI component                        |
| @scrollpane@    | _    | text-mode interactive scroll pane UI component             |
| @unifiedarity@  | X    | calculates correctly block arity, fixing a bug in Proc     |
| @visitor@       | X    | Visitor design pattern                                     |